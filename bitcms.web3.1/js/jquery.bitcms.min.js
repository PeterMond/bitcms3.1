/********************************************
参数
expandedIcon string 关闭状态,
collapsedIcon string 打开状态,
emptyIcon string 无字节点,
level: int 默认打开深度 开始0
ajax json类型
    type string post/get
    url: string 提交URL路径, 
    async bolean true/false 异步
    cache bolean true/false 缓存
ajax string类型 提交URL路径
deep  ajax最大深度 开始0
click: function 点击事件 返回true false
***********************/
+function ($) { $.fn.tree = function (options) { var defaults = { expandedIcon: "glyphicon-minus-sign", collapsedIcon: "glyphicon-plus-sign", emptyIcon: "glyphicon-chevron-right", level: 0, ajax: { type: "post", url: "", async: true, cache: true }, deep: 2, click: undefined, button: undefined }; options = $.extend(defaults, options); var box = $(this); var __li = "<li><i class='icon glyphicon'></i><a></a></li>"; if (!box.hasClass("tree")) { box.addClass("tree") } var ajax = function (note, level) { var ajaxParm = { type: "GET", async: true, cache: true, url: "" }; if (typeof (options.ajax) === "object") { ajaxParm = $.extend(ajaxParm, options.ajax) } else { if (typeof (options.ajax) === "string") { ajaxParm.url = options.ajax } } $.ajax({ type: ajaxParm.type, url: ajaxParm.url, async: ajaxParm.async, cache: ajaxParm.cache, data: { id: note.attr("data-id") }, success: function (data) { if (data.error == 0) { note.removeClass("ajax"); if (data.data.length > 0) { var _level = level; var _ul = $("<ul></ul>"); $(data.data).each(function (i, n) { var _li = $(__li); _li.attr("data-id", n.id); if (_level + 1 < options.deep) { _li.addClass("ajax") } $("a", _li).attr("href", n.url); if (n.icon) { $("a", _li).append("<i class='" + n.icon + "'></i>") } $("a", _li).append("<span class='text-primary'>[" + n.id + "]</span> " + n.text); _li.appendTo(_ul) }); _ul.appendTo(note); if (note.is("li")) { note.children(".icon").removeClass(options.collapsedIcon).addClass(options.expandedIcon); notesInit(note, _level) } else { init(note, 0) } } else { if (note.is("li")) { note.children(".icon").removeClass(options.collapsedIcon).addClass(options.emptyIcon) } } } else { BootstrapDialog.danger("树形菜单加载出错！") } } }) }; var notesInit = function (note, level) { if (!level) { level = 0 } var _icon = note.children(".icon"); if (_icon.size() == 0) { _icon = $("<i class='icon glyphicon'></i>"); _icon.insertBefore(note.children(":first")) } if (!note.is("[data-level]")) { note.attr("data-level", level) } if (note.hasClass("ajax")) { _icon.addClass(options.collapsedIcon); if (level >= 0 && level < options.level) { ajax(note, level) } } else { if (note.children("ul").size() > 0) { if (_icon.hasClass(options.expandedIcon)) { note.children("ul").hide().slideDown() } else { if (_icon.hasClass(options.collapsedIcon)) { note.children("ul").hide() } else { if (level >= 0 && level < options.level) { _icon.addClass(options.expandedIcon); note.children("ul").show() } else { _icon.addClass(options.collapsedIcon); note.children("ul").hide() } } } } else { _icon.css("cursor", "initial"); _icon.addClass(options.emptyIcon) } } if (note.children("ul").size() > 0) { init(note.children("ul"), level + 1) } }; var init = function (element, level) { if (element.is("ul")) { element.children("li").each(function (i) { notesInit($(this), level) }) } else { element.children("ul").each(function (i) { $(this).children("li").each(function () { notesInit($(this), level) }) }) } }; init(box, 0); if (box.hasClass("ajax")) { ajax(box, -1) } box.undelegate(".icon", "click").delegate(".icon", "click", function () { var _icon = $(this); if (_icon.hasClass(options.emptyIcon)) { return } else { var _li = _icon.parent(); if (_icon.hasClass(options.collapsedIcon) && _li.children("ul").size() > 0) { _li.children("ul").slideDown(); _icon.removeClass(options.collapsedIcon).addClass(options.expandedIcon) } else { if (_icon.hasClass(options.expandedIcon) && _li.children("ul").size() > 0) { _icon.removeClass(options.expandedIcon).addClass(options.collapsedIcon); _li.children("ul").hide() } else { if (_li.hasClass("ajax")) { ajax(_li, parseInt(_li.attr("data-level"))) } } } } }); box.undelegate("li>a", "click").delegate("li>a", "click", function () { var link = $(this); if (typeof (options.click) === "function") { if (!link.hasClass("active")) { $(".active", box).removeClass("active"); link.addClass("active") } return options.click(link.parent()) } else { } }) } }(window.jQuery);
//设置多标签
+function ($) { $.fn.setTags = function (options) { var defaults = { btnbox: undefined, minsize: 1, maxsize: 10, addkey: undefined, delkey: undefined }; options = $.extend(defaults, options); var boxs = $(this); var __btnboxclass = "____btnbox" + Math.ceil(Math.random() * (10)); boxs.setbtn = function () { var __btnbox = $(options.btnbox, boxs); var __addbtn = __btnbox.children().first(); var __delbtn = __btnbox.children().last(); if (boxs.children().size() >= options.maxsize) { __addbtn.hide() } else { __addbtn.show() } if (boxs.children().size() <= 1) { __delbtn.hide() } else { __delbtn.show() } __addbtn.off("click").on("click", function () { boxs.addchild(1) }); __delbtn.off("click").on("click", function () { var __box = boxs.children().last(); $(this).parent().appendTo($("." + __btnboxclass, __box.prev())); __box.remove(); boxs.setbtn() }) }; boxs.addchild = function (len) { for (var i = 1; i <= len; i++) { var __box = boxs.children().last().clone(true, true); boxs.append(__box); $(options.btnbox, boxs.children().last().prev()).remove(); if (typeof options.addkey == "function") { options.addkey(boxs.children().size(), __box) } } boxs.setbtn() }; boxs.reset = function (len, fun) { if ($(options.btnbox, boxs.children().first()).size() == 0) { $(options.btnbox, boxs.children().last()).appendTo("." + __btnboxclass, boxs.children().first()) } boxs.children().slice(1).remove(); boxs.addchild(len - 1); if (typeof fun == "function") { fun(boxs.children()) } }; boxs.init = function () { var btnbox = $(options.btnbox, boxs); btnbox.parent().addClass(__btnboxclass); boxs.setbtn(); if (boxs.children().size() < options.minsize) { boxs.reset(options.minsize) } }; boxs.init(); return boxs } }(window.jQuery);
